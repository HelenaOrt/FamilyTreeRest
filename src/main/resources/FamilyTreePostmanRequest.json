{
	"info": {
		"_postman_id": "321743e6-8d5b-4c7f-87a4-b6fe0eb252c1",
		"name": "FamilyTree",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "People",
			"item": [
				{
					"name": "FindAll",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "Elena",
									"type": "string"
								},
								{
									"key": "password",
									"value": "$2a$12$k4Zt1f1CYw34zkrU2P7Iz.IAyklW4yawVZtYVGqNJ2gkGj4lwsjze",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"name\": \"Maria\",\n        \"lastName\": \"Ortiz\",\n        \"age\": 22,\n        \"country\": \"Spain\",\n        \"sonsSet\": []\n    }"
						},
						"url": {
							"raw": "{{URL_API}}/people",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"people"
							]
						},
						"description": "Encontrar todas las personas dadas de alta"
					},
					"response": []
				},
				{
					"name": "Find One",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL_API}}/people/1",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"people",
								"1"
							]
						},
						"description": "Encontrar una persona introduciendo su id"
					},
					"response": []
				},
				{
					"name": "Login USER",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJjcmlzdGlhbiIsInN1YiI6IkVsZW5hIiwiZXhwIjoxNTY4MDk4MDc0LCJhdXRob3JpdGllcyI6WyJST0xFX0FETUlOIl19.05Zx_Q6gHw0FgVDXOxQkt4u5gdE2Jdy4ODw4Unk2gN6G0oIN2yyQu6hbSBuDdYXYZtC4nlCrT7ZKtf7TC9jAAA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"RandomUser\",\n\t\"password\": 1234\n}"
						},
						"url": {
							"raw": "{{URL_API}}/auth/login",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Permite autenticarte en la aplicación.\n\nEl rol ADMIN tendrá acceso a todos los endpoint. Podrá:\n- Visualizar a todas las personas\n- Buscar una persona concreta en la lista\n- Dar de alta una persona\n- Modificar una persona\n- Borrar una persona\n\nEl rol USER tendrá acceso a todas las opciones anteriores pero no puede borrar a una persona de base de datos\n\nLos usuarios no autenticados solo pueden visualizar las personas existentes y buscar una con su id"
					},
					"response": []
				},
				{
					"name": "Login ADMIN",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"Elena\",\n\t\"password\": 1234\n}"
						},
						"url": {
							"raw": "{{URL_API}}/auth/login",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Acceso a la applicación como ADMIN\nAcceso a todas las funciones"
					},
					"response": []
				},
				{
					"name": "Create Person WithoutRol",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL_API}}/people",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"people"
							]
						},
						"description": "Test para ver si un usuario no autenticado puede acceder a la función de crear persona\n\nDebería devolver 401 Unauthorized"
					},
					"response": []
				},
				{
					"name": "Create Person USER",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"name\": \"Maria\",\n        \"lastName\": \"Ortiz\",\n        \"age\": 22,\n        \"country\": \"Spain\",\n        \"fatherId\": 1\n    }\n    "
						},
						"url": {
							"raw": "{{URL_API}}/people",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"people"
							]
						},
						"description": "Endpoint para crear una persona.\nAl crear una persona la relación padre e hijo se establece al poner el id del padre.\n\nVefica que padre e hijo tengan el mismo apellido y que el padre no tenga menos años que su propio hijo\nSi el atributo del padre es null (\"\" o 0) dará error pero se guardará en base de datos\n\nBearer token usado: ROL_USER\n"
					},
					"response": []
				},
				{
					"name": "Update Person WithoutRol",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{URL_API}}/person/1",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"person",
								"1"
							]
						},
						"description": "Debería devolver 401 Unathorized porque las personas logueadas no tienen acceso a estra función"
					},
					"response": []
				},
				{
					"name": "Update Person USER",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJjcmlzdGlhbiIsInN1YiI6IlJhbmRvbVVzZXIiLCJleHAiOjE1NjgwOTg1NTUsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfQ.esIx4Zrz16CeJL4-O7rBxR4qxJTQbsMaF92lHJVZRht8Ax--kZIgVY3GXkHEQRCtLMkXIj0bdKIgzLZGA3rmIA",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"id\": 1,\n        \"name\": \"New Name\",\n        \"lastName\": \"Ortiz\",\n        \"age\": 22,\n        \"country\": \"Spain\",\n        \"fatherId\": 2\n}"
						},
						"url": {
							"raw": "{{URL_API}}/people/1",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"people",
								"1"
							]
						},
						"description": "Permite cambiar algunos de los valores de persona siempre que no entren en conflicto:\n\n- Nombre(no tiene restricciones salgo las de Spring Boot)\n- Apellido (Solo se puede cambiar sino tiene padre, porque se considera que un hijo debe tener el mismo apellido que su padre. No se tiene en cuenta la posibilidad de hijos adoptados ya que esa persona tiene un padre desconocido)\n- Edad (a no ser de que tenga padre y le pongas una edad mayor)\n- Country(no tiene restricciones salvo las de Spring Boot)\n- fatherId: para poder modificar el padre el nuevo id del padre debe ser igual a los existentes en la base de datos, sino debería crear previamente \"un padre\". El padre y el hijo deben tener los mismos apellidos y la edad del hijo no puede ser nunca mayor o igual que la del padre de la base de datos"
					},
					"response": []
				},
				{
					"name": "Delete Person WithoutRol",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL_API}}/person/1",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"person",
								"1"
							]
						},
						"description": "Intenta borrar una persona sin ser usuario, debería devolver 401 Unauthorized"
					},
					"response": []
				},
				{
					"name": "Delete person USER",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL_API}}/people/3",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"people",
								"3"
							]
						},
						"description": "Intenta borrar una persona sin ser Admin, debería devolver 403 Forbiden"
					},
					"response": []
				},
				{
					"name": "Delete Person ADMIN",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJjcmlzdGlhbiIsInN1YiI6IkVsZW5hIiwiZXhwIjoxNTY4MDk4NDU4LCJhdXRob3JpdGllcyI6WyJST0xFX0FETUlOIl19.weba_Pj5wjl27FkZeUXT4x8XiZfHbI2TiIsKy4pqtyCIzH3P43ZlyBLFsmlpaVfgFVbzGWz2lquGe1FStZdTRA",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL_API}}/person/3",
							"host": [
								"{{URL_API}}"
							],
							"path": [
								"person",
								"3"
							]
						},
						"description": "Borrar persona con el ROL_ADMIN de la lista de personas dadas de alta\n\nNo devuelve nada por pantalla\n\nEl ADMIN puede realizar todas las funciones, debería borrar una persona de forma correcta.\n\nSi una persona se borra también se borrarán sus hijos porque se considera que en un árbol genealógico un hijo no podría existir sin su padre"
					},
					"response": []
				}
			]
		}
	]
}